// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_interface_module

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func InterfaceModuleDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_version": schema.StringAttribute{
				Computed: true,
			},
			"hash": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "resource content will be returned as it was at the time of this git hash",
				MarkdownDescription: "resource content will be returned as it was at the time of this git hash",
			},
			"kind": schema.StringAttribute{
				Computed: true,
			},
			"metadata": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"annotations": schema.MapAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"labels": schema.MapAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"namespace": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: MetadataType{
					ObjectType: types.ObjectType{
						AttrTypes: MetadataValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "name of the InterfaceModule",
				MarkdownDescription: "name of the InterfaceModule",
			},
			"namespace": schema.StringAttribute{
				Required:            true,
				Description:         "the namespace scope in which to operate",
				MarkdownDescription: "the namespace scope in which to operate",
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "InterfaceModuleSpec defines the desired state of InterfaceModule",
				MarkdownDescription: "InterfaceModuleSpec defines the desired state of InterfaceModule",
			},
			"status": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"common_language_equipment_identifier": schema.StringAttribute{
						Computed:            true,
						Description:         "The CLEI code of this component",
						MarkdownDescription: "The CLEI code of this component",
					},
					"last_booted": schema.StringAttribute{
						Computed:            true,
						Description:         "The date and time this component last booted",
						MarkdownDescription: "The date and time this component last booted",
					},
					"last_change": schema.StringAttribute{
						Computed:            true,
						Description:         "The date and time this component last changed operational state",
						MarkdownDescription: "The date and time this component last changed operational state",
					},
					"locator_enabled": schema.BoolAttribute{
						Computed:            true,
						Description:         "Indicates if the locator LED for the component is active",
						MarkdownDescription: "Indicates if the locator LED for the component is active",
					},
					"manufactured_date": schema.StringAttribute{
						Computed:            true,
						Description:         "The date this component was manufactured",
						MarkdownDescription: "The date this component was manufactured",
					},
					"operational_state": schema.StringAttribute{
						Computed:            true,
						Description:         "Indicates the current operational state of this component.",
						MarkdownDescription: "Indicates the current operational state of this component.",
					},
					"parent": schema.StringAttribute{
						Computed:            true,
						Description:         "Reference to a parent component",
						MarkdownDescription: "Reference to a parent component",
					},
					"parent_type": schema.StringAttribute{
						Computed:            true,
						Description:         "Type of the parent component",
						MarkdownDescription: "Type of the parent component",
					},
					"part_number": schema.StringAttribute{
						Computed:            true,
						Description:         "The discovered part number of this component",
						MarkdownDescription: "The discovered part number of this component",
					},
					"removable": schema.BoolAttribute{
						Computed:            true,
						Description:         "Indicates if this component is removable",
						MarkdownDescription: "Indicates if this component is removable",
					},
					"serial_number": schema.StringAttribute{
						Computed:            true,
						Description:         "The discovered serial number of this component",
						MarkdownDescription: "The discovered serial number of this component",
					},
					"slot": schema.StringAttribute{
						Computed:            true,
						Description:         "Slot this component resides in, unset for components that do not have a slot or ID",
						MarkdownDescription: "Slot this component resides in, unset for components that do not have a slot or ID",
					},
					"software_version": schema.StringAttribute{
						Computed:            true,
						Description:         "Version string of the software running on this component",
						MarkdownDescription: "Version string of the software running on this component",
					},
					"target": schema.StringAttribute{
						Computed:            true,
						Description:         "Target this component resides on.",
						MarkdownDescription: "Target this component resides on.",
					},
					"temperature": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"alarm_state": schema.BoolAttribute{
								Computed:            true,
								Description:         "The temperature alarm state, as reported by the component",
								MarkdownDescription: "The temperature alarm state, as reported by the component",
							},
							"instant": schema.Int64Attribute{
								Computed:            true,
								Description:         "The current temperature of this component",
								MarkdownDescription: "The current temperature of this component",
							},
							"margin": schema.Int64Attribute{
								Computed:            true,
								Description:         "The margin temperature of this component",
								MarkdownDescription: "The margin temperature of this component",
							},
							"maximum": schema.Int64Attribute{
								Computed:            true,
								Description:         "The maximum temperature of this component",
								MarkdownDescription: "The maximum temperature of this component",
							},
							"threshold": schema.Int64Attribute{
								Computed:            true,
								Description:         "The threshold temperature of this component",
								MarkdownDescription: "The threshold temperature of this component",
							},
						},
						CustomType: TemperatureType{
							ObjectType: types.ObjectType{
								AttrTypes: TemperatureValue{}.AttributeTypes(ctx),
							},
						},
						Computed:            true,
						Description:         "Temperature information for this component",
						MarkdownDescription: "Temperature information for this component",
					},
					"type": schema.StringAttribute{
						Computed:            true,
						Description:         "Component type, as provided by the target",
						MarkdownDescription: "Component type, as provided by the target",
					},
				},
				CustomType: StatusType{
					ObjectType: types.ObjectType{
						AttrTypes: StatusValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "InterfaceModuleStatus defines the observed state of InterfaceModule",
				MarkdownDescription: "InterfaceModuleStatus defines the observed state of InterfaceModule",
			},
		},
	}
}

type InterfaceModuleModel struct {
	ApiVersion types.String  `tfsdk:"api_version"`
	Hash       types.String  `tfsdk:"hash"`
	Kind       types.String  `tfsdk:"kind"`
	Metadata   MetadataValue `tfsdk:"metadata"`
	Name       types.String  `tfsdk:"name"`
	Namespace  types.String  `tfsdk:"namespace"`
	Spec       SpecValue     `tfsdk:"spec"`
	Status     StatusValue   `tfsdk:"status"`
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return nil, diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return nil, diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return nil, diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		Namespace:   namespaceVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		Namespace:   namespaceVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	Annotations basetypes.MapValue    `tfsdk:"annotations"`
	Labels      basetypes.MapValue    `tfsdk:"labels"`
	Name        basetypes.StringValue `tfsdk:"name"`
	Namespace   basetypes.StringValue `tfsdk:"namespace"`
	state       attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["annotations"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["labels"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["namespace"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Annotations.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["annotations"] = val

		val, err = v.Labels.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["labels"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Namespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespace"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var annotationsVal basetypes.MapValue
	switch {
	case v.Annotations.IsUnknown():
		annotationsVal = types.MapUnknown(types.StringType)
	case v.Annotations.IsNull():
		annotationsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		annotationsVal, d = types.MapValue(types.StringType, v.Annotations.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name":      basetypes.StringType{},
			"namespace": basetypes.StringType{},
		}), diags
	}

	var labelsVal basetypes.MapValue
	switch {
	case v.Labels.IsUnknown():
		labelsVal = types.MapUnknown(types.StringType)
	case v.Labels.IsNull():
		labelsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		labelsVal, d = types.MapValue(types.StringType, v.Labels.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name":      basetypes.StringType{},
			"namespace": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"annotations": annotationsVal,
			"labels":      labelsVal,
			"name":        v.Name,
			"namespace":   v.Namespace,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Annotations.Equal(other.Annotations) {
		return false
	}

	if !v.Labels.Equal(other.Labels) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Namespace.Equal(other.Namespace) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	state attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = StatusType{}

type StatusType struct {
	basetypes.ObjectType
}

func (t StatusType) Equal(o attr.Type) bool {
	other, ok := o.(StatusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StatusType) String() string {
	return "StatusType"
}

func (t StatusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	commonLanguageEquipmentIdentifierAttribute, ok := attributes["common_language_equipment_identifier"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`common_language_equipment_identifier is missing from object`)

		return nil, diags
	}

	commonLanguageEquipmentIdentifierVal, ok := commonLanguageEquipmentIdentifierAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`common_language_equipment_identifier expected to be basetypes.StringValue, was: %T`, commonLanguageEquipmentIdentifierAttribute))
	}

	lastBootedAttribute, ok := attributes["last_booted"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_booted is missing from object`)

		return nil, diags
	}

	lastBootedVal, ok := lastBootedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_booted expected to be basetypes.StringValue, was: %T`, lastBootedAttribute))
	}

	lastChangeAttribute, ok := attributes["last_change"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_change is missing from object`)

		return nil, diags
	}

	lastChangeVal, ok := lastChangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_change expected to be basetypes.StringValue, was: %T`, lastChangeAttribute))
	}

	locatorEnabledAttribute, ok := attributes["locator_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`locator_enabled is missing from object`)

		return nil, diags
	}

	locatorEnabledVal, ok := locatorEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`locator_enabled expected to be basetypes.BoolValue, was: %T`, locatorEnabledAttribute))
	}

	manufacturedDateAttribute, ok := attributes["manufactured_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`manufactured_date is missing from object`)

		return nil, diags
	}

	manufacturedDateVal, ok := manufacturedDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`manufactured_date expected to be basetypes.StringValue, was: %T`, manufacturedDateAttribute))
	}

	operationalStateAttribute, ok := attributes["operational_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operational_state is missing from object`)

		return nil, diags
	}

	operationalStateVal, ok := operationalStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operational_state expected to be basetypes.StringValue, was: %T`, operationalStateAttribute))
	}

	parentAttribute, ok := attributes["parent"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parent is missing from object`)

		return nil, diags
	}

	parentVal, ok := parentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parent expected to be basetypes.StringValue, was: %T`, parentAttribute))
	}

	parentTypeAttribute, ok := attributes["parent_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parent_type is missing from object`)

		return nil, diags
	}

	parentTypeVal, ok := parentTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parent_type expected to be basetypes.StringValue, was: %T`, parentTypeAttribute))
	}

	partNumberAttribute, ok := attributes["part_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`part_number is missing from object`)

		return nil, diags
	}

	partNumberVal, ok := partNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`part_number expected to be basetypes.StringValue, was: %T`, partNumberAttribute))
	}

	removableAttribute, ok := attributes["removable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`removable is missing from object`)

		return nil, diags
	}

	removableVal, ok := removableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`removable expected to be basetypes.BoolValue, was: %T`, removableAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return nil, diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	slotAttribute, ok := attributes["slot"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slot is missing from object`)

		return nil, diags
	}

	slotVal, ok := slotAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slot expected to be basetypes.StringValue, was: %T`, slotAttribute))
	}

	softwareVersionAttribute, ok := attributes["software_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`software_version is missing from object`)

		return nil, diags
	}

	softwareVersionVal, ok := softwareVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`software_version expected to be basetypes.StringValue, was: %T`, softwareVersionAttribute))
	}

	targetAttribute, ok := attributes["target"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target is missing from object`)

		return nil, diags
	}

	targetVal, ok := targetAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target expected to be basetypes.StringValue, was: %T`, targetAttribute))
	}

	temperatureAttribute, ok := attributes["temperature"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`temperature is missing from object`)

		return nil, diags
	}

	temperatureVal, ok := temperatureAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`temperature expected to be basetypes.ObjectValue, was: %T`, temperatureAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StatusValue{
		CommonLanguageEquipmentIdentifier: commonLanguageEquipmentIdentifierVal,
		LastBooted:                        lastBootedVal,
		LastChange:                        lastChangeVal,
		LocatorEnabled:                    locatorEnabledVal,
		ManufacturedDate:                  manufacturedDateVal,
		OperationalState:                  operationalStateVal,
		Parent:                            parentVal,
		ParentType:                        parentTypeVal,
		PartNumber:                        partNumberVal,
		Removable:                         removableVal,
		SerialNumber:                      serialNumberVal,
		Slot:                              slotVal,
		SoftwareVersion:                   softwareVersionVal,
		Target:                            targetVal,
		Temperature:                       temperatureVal,
		StatusType:                        typeVal,
		state:                             attr.ValueStateKnown,
	}, diags
}

func NewStatusValueNull() StatusValue {
	return StatusValue{
		state: attr.ValueStateNull,
	}
}

func NewStatusValueUnknown() StatusValue {
	return StatusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStatusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StatusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StatusValue Attribute Value",
				"While creating a StatusValue value, a missing attribute value was detected. "+
					"A StatusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StatusValue Attribute Type",
				"While creating a StatusValue value, an invalid attribute value was detected. "+
					"A StatusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StatusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StatusValue Attribute Value",
				"While creating a StatusValue value, an extra attribute value was detected. "+
					"A StatusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StatusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	commonLanguageEquipmentIdentifierAttribute, ok := attributes["common_language_equipment_identifier"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`common_language_equipment_identifier is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	commonLanguageEquipmentIdentifierVal, ok := commonLanguageEquipmentIdentifierAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`common_language_equipment_identifier expected to be basetypes.StringValue, was: %T`, commonLanguageEquipmentIdentifierAttribute))
	}

	lastBootedAttribute, ok := attributes["last_booted"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_booted is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	lastBootedVal, ok := lastBootedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_booted expected to be basetypes.StringValue, was: %T`, lastBootedAttribute))
	}

	lastChangeAttribute, ok := attributes["last_change"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_change is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	lastChangeVal, ok := lastChangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_change expected to be basetypes.StringValue, was: %T`, lastChangeAttribute))
	}

	locatorEnabledAttribute, ok := attributes["locator_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`locator_enabled is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	locatorEnabledVal, ok := locatorEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`locator_enabled expected to be basetypes.BoolValue, was: %T`, locatorEnabledAttribute))
	}

	manufacturedDateAttribute, ok := attributes["manufactured_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`manufactured_date is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	manufacturedDateVal, ok := manufacturedDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`manufactured_date expected to be basetypes.StringValue, was: %T`, manufacturedDateAttribute))
	}

	operationalStateAttribute, ok := attributes["operational_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operational_state is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	operationalStateVal, ok := operationalStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operational_state expected to be basetypes.StringValue, was: %T`, operationalStateAttribute))
	}

	parentAttribute, ok := attributes["parent"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parent is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	parentVal, ok := parentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parent expected to be basetypes.StringValue, was: %T`, parentAttribute))
	}

	parentTypeAttribute, ok := attributes["parent_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parent_type is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	parentTypeVal, ok := parentTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parent_type expected to be basetypes.StringValue, was: %T`, parentTypeAttribute))
	}

	partNumberAttribute, ok := attributes["part_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`part_number is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	partNumberVal, ok := partNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`part_number expected to be basetypes.StringValue, was: %T`, partNumberAttribute))
	}

	removableAttribute, ok := attributes["removable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`removable is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	removableVal, ok := removableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`removable expected to be basetypes.BoolValue, was: %T`, removableAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	slotAttribute, ok := attributes["slot"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slot is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	slotVal, ok := slotAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slot expected to be basetypes.StringValue, was: %T`, slotAttribute))
	}

	softwareVersionAttribute, ok := attributes["software_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`software_version is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	softwareVersionVal, ok := softwareVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`software_version expected to be basetypes.StringValue, was: %T`, softwareVersionAttribute))
	}

	targetAttribute, ok := attributes["target"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	targetVal, ok := targetAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target expected to be basetypes.StringValue, was: %T`, targetAttribute))
	}

	temperatureAttribute, ok := attributes["temperature"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`temperature is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	temperatureVal, ok := temperatureAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`temperature expected to be basetypes.ObjectValue, was: %T`, temperatureAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	return StatusValue{
		CommonLanguageEquipmentIdentifier: commonLanguageEquipmentIdentifierVal,
		LastBooted:                        lastBootedVal,
		LastChange:                        lastChangeVal,
		LocatorEnabled:                    locatorEnabledVal,
		ManufacturedDate:                  manufacturedDateVal,
		OperationalState:                  operationalStateVal,
		Parent:                            parentVal,
		ParentType:                        parentTypeVal,
		PartNumber:                        partNumberVal,
		Removable:                         removableVal,
		SerialNumber:                      serialNumberVal,
		Slot:                              slotVal,
		SoftwareVersion:                   softwareVersionVal,
		Target:                            targetVal,
		Temperature:                       temperatureVal,
		StatusType:                        typeVal,
		state:                             attr.ValueStateKnown,
	}, diags
}

func NewStatusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StatusValue {
	object, diags := NewStatusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStatusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StatusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStatusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStatusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStatusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStatusValueMust(StatusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StatusType) ValueType(ctx context.Context) attr.Value {
	return StatusValue{}
}

var _ basetypes.ObjectValuable = StatusValue{}

type StatusValue struct {
	CommonLanguageEquipmentIdentifier basetypes.StringValue `tfsdk:"common_language_equipment_identifier"`
	LastBooted                        basetypes.StringValue `tfsdk:"last_booted"`
	LastChange                        basetypes.StringValue `tfsdk:"last_change"`
	LocatorEnabled                    basetypes.BoolValue   `tfsdk:"locator_enabled"`
	ManufacturedDate                  basetypes.StringValue `tfsdk:"manufactured_date"`
	OperationalState                  basetypes.StringValue `tfsdk:"operational_state"`
	Parent                            basetypes.StringValue `tfsdk:"parent"`
	ParentType                        basetypes.StringValue `tfsdk:"parent_type"`
	PartNumber                        basetypes.StringValue `tfsdk:"part_number"`
	Removable                         basetypes.BoolValue   `tfsdk:"removable"`
	SerialNumber                      basetypes.StringValue `tfsdk:"serial_number"`
	Slot                              basetypes.StringValue `tfsdk:"slot"`
	SoftwareVersion                   basetypes.StringValue `tfsdk:"software_version"`
	Target                            basetypes.StringValue `tfsdk:"target"`
	Temperature                       basetypes.ObjectValue `tfsdk:"temperature"`
	StatusType                        basetypes.StringValue `tfsdk:"type"`
	state                             attr.ValueState
}

func (v StatusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 16)

	var val tftypes.Value
	var err error

	attrTypes["common_language_equipment_identifier"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_booted"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_change"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["locator_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["manufactured_date"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["operational_state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["parent"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["parent_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["part_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["removable"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["serial_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["slot"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["software_version"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["target"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["temperature"] = basetypes.ObjectType{
		AttrTypes: TemperatureValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 16)

		val, err = v.CommonLanguageEquipmentIdentifier.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["common_language_equipment_identifier"] = val

		val, err = v.LastBooted.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_booted"] = val

		val, err = v.LastChange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_change"] = val

		val, err = v.LocatorEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["locator_enabled"] = val

		val, err = v.ManufacturedDate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["manufactured_date"] = val

		val, err = v.OperationalState.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["operational_state"] = val

		val, err = v.Parent.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["parent"] = val

		val, err = v.ParentType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["parent_type"] = val

		val, err = v.PartNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["part_number"] = val

		val, err = v.Removable.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["removable"] = val

		val, err = v.SerialNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["serial_number"] = val

		val, err = v.Slot.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slot"] = val

		val, err = v.SoftwareVersion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["software_version"] = val

		val, err = v.Target.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["target"] = val

		val, err = v.Temperature.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["temperature"] = val

		val, err = v.StatusType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StatusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StatusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StatusValue) String() string {
	return "StatusValue"
}

func (v StatusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var temperature basetypes.ObjectValue

	if v.Temperature.IsNull() {
		temperature = types.ObjectNull(
			TemperatureValue{}.AttributeTypes(ctx),
		)
	}

	if v.Temperature.IsUnknown() {
		temperature = types.ObjectUnknown(
			TemperatureValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Temperature.IsNull() && !v.Temperature.IsUnknown() {
		temperature = types.ObjectValueMust(
			TemperatureValue{}.AttributeTypes(ctx),
			v.Temperature.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"common_language_equipment_identifier": basetypes.StringType{},
		"last_booted":                          basetypes.StringType{},
		"last_change":                          basetypes.StringType{},
		"locator_enabled":                      basetypes.BoolType{},
		"manufactured_date":                    basetypes.StringType{},
		"operational_state":                    basetypes.StringType{},
		"parent":                               basetypes.StringType{},
		"parent_type":                          basetypes.StringType{},
		"part_number":                          basetypes.StringType{},
		"removable":                            basetypes.BoolType{},
		"serial_number":                        basetypes.StringType{},
		"slot":                                 basetypes.StringType{},
		"software_version":                     basetypes.StringType{},
		"target":                               basetypes.StringType{},
		"temperature": basetypes.ObjectType{
			AttrTypes: TemperatureValue{}.AttributeTypes(ctx),
		},
		"type": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"common_language_equipment_identifier": v.CommonLanguageEquipmentIdentifier,
			"last_booted":                          v.LastBooted,
			"last_change":                          v.LastChange,
			"locator_enabled":                      v.LocatorEnabled,
			"manufactured_date":                    v.ManufacturedDate,
			"operational_state":                    v.OperationalState,
			"parent":                               v.Parent,
			"parent_type":                          v.ParentType,
			"part_number":                          v.PartNumber,
			"removable":                            v.Removable,
			"serial_number":                        v.SerialNumber,
			"slot":                                 v.Slot,
			"software_version":                     v.SoftwareVersion,
			"target":                               v.Target,
			"temperature":                          temperature,
			"type":                                 v.StatusType,
		})

	return objVal, diags
}

func (v StatusValue) Equal(o attr.Value) bool {
	other, ok := o.(StatusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CommonLanguageEquipmentIdentifier.Equal(other.CommonLanguageEquipmentIdentifier) {
		return false
	}

	if !v.LastBooted.Equal(other.LastBooted) {
		return false
	}

	if !v.LastChange.Equal(other.LastChange) {
		return false
	}

	if !v.LocatorEnabled.Equal(other.LocatorEnabled) {
		return false
	}

	if !v.ManufacturedDate.Equal(other.ManufacturedDate) {
		return false
	}

	if !v.OperationalState.Equal(other.OperationalState) {
		return false
	}

	if !v.Parent.Equal(other.Parent) {
		return false
	}

	if !v.ParentType.Equal(other.ParentType) {
		return false
	}

	if !v.PartNumber.Equal(other.PartNumber) {
		return false
	}

	if !v.Removable.Equal(other.Removable) {
		return false
	}

	if !v.SerialNumber.Equal(other.SerialNumber) {
		return false
	}

	if !v.Slot.Equal(other.Slot) {
		return false
	}

	if !v.SoftwareVersion.Equal(other.SoftwareVersion) {
		return false
	}

	if !v.Target.Equal(other.Target) {
		return false
	}

	if !v.Temperature.Equal(other.Temperature) {
		return false
	}

	if !v.StatusType.Equal(other.StatusType) {
		return false
	}

	return true
}

func (v StatusValue) Type(ctx context.Context) attr.Type {
	return StatusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StatusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"common_language_equipment_identifier": basetypes.StringType{},
		"last_booted":                          basetypes.StringType{},
		"last_change":                          basetypes.StringType{},
		"locator_enabled":                      basetypes.BoolType{},
		"manufactured_date":                    basetypes.StringType{},
		"operational_state":                    basetypes.StringType{},
		"parent":                               basetypes.StringType{},
		"parent_type":                          basetypes.StringType{},
		"part_number":                          basetypes.StringType{},
		"removable":                            basetypes.BoolType{},
		"serial_number":                        basetypes.StringType{},
		"slot":                                 basetypes.StringType{},
		"software_version":                     basetypes.StringType{},
		"target":                               basetypes.StringType{},
		"temperature": basetypes.ObjectType{
			AttrTypes: TemperatureValue{}.AttributeTypes(ctx),
		},
		"type": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TemperatureType{}

type TemperatureType struct {
	basetypes.ObjectType
}

func (t TemperatureType) Equal(o attr.Type) bool {
	other, ok := o.(TemperatureType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TemperatureType) String() string {
	return "TemperatureType"
}

func (t TemperatureType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	alarmStateAttribute, ok := attributes["alarm_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alarm_state is missing from object`)

		return nil, diags
	}

	alarmStateVal, ok := alarmStateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alarm_state expected to be basetypes.BoolValue, was: %T`, alarmStateAttribute))
	}

	instantAttribute, ok := attributes["instant"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instant is missing from object`)

		return nil, diags
	}

	instantVal, ok := instantAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instant expected to be basetypes.Int64Value, was: %T`, instantAttribute))
	}

	marginAttribute, ok := attributes["margin"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`margin is missing from object`)

		return nil, diags
	}

	marginVal, ok := marginAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`margin expected to be basetypes.Int64Value, was: %T`, marginAttribute))
	}

	maximumAttribute, ok := attributes["maximum"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`maximum is missing from object`)

		return nil, diags
	}

	maximumVal, ok := maximumAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`maximum expected to be basetypes.Int64Value, was: %T`, maximumAttribute))
	}

	thresholdAttribute, ok := attributes["threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`threshold is missing from object`)

		return nil, diags
	}

	thresholdVal, ok := thresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`threshold expected to be basetypes.Int64Value, was: %T`, thresholdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TemperatureValue{
		AlarmState: alarmStateVal,
		Instant:    instantVal,
		Margin:     marginVal,
		Maximum:    maximumVal,
		Threshold:  thresholdVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTemperatureValueNull() TemperatureValue {
	return TemperatureValue{
		state: attr.ValueStateNull,
	}
}

func NewTemperatureValueUnknown() TemperatureValue {
	return TemperatureValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTemperatureValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TemperatureValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TemperatureValue Attribute Value",
				"While creating a TemperatureValue value, a missing attribute value was detected. "+
					"A TemperatureValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TemperatureValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TemperatureValue Attribute Type",
				"While creating a TemperatureValue value, an invalid attribute value was detected. "+
					"A TemperatureValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TemperatureValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TemperatureValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TemperatureValue Attribute Value",
				"While creating a TemperatureValue value, an extra attribute value was detected. "+
					"A TemperatureValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TemperatureValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTemperatureValueUnknown(), diags
	}

	alarmStateAttribute, ok := attributes["alarm_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alarm_state is missing from object`)

		return NewTemperatureValueUnknown(), diags
	}

	alarmStateVal, ok := alarmStateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alarm_state expected to be basetypes.BoolValue, was: %T`, alarmStateAttribute))
	}

	instantAttribute, ok := attributes["instant"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instant is missing from object`)

		return NewTemperatureValueUnknown(), diags
	}

	instantVal, ok := instantAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instant expected to be basetypes.Int64Value, was: %T`, instantAttribute))
	}

	marginAttribute, ok := attributes["margin"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`margin is missing from object`)

		return NewTemperatureValueUnknown(), diags
	}

	marginVal, ok := marginAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`margin expected to be basetypes.Int64Value, was: %T`, marginAttribute))
	}

	maximumAttribute, ok := attributes["maximum"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`maximum is missing from object`)

		return NewTemperatureValueUnknown(), diags
	}

	maximumVal, ok := maximumAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`maximum expected to be basetypes.Int64Value, was: %T`, maximumAttribute))
	}

	thresholdAttribute, ok := attributes["threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`threshold is missing from object`)

		return NewTemperatureValueUnknown(), diags
	}

	thresholdVal, ok := thresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`threshold expected to be basetypes.Int64Value, was: %T`, thresholdAttribute))
	}

	if diags.HasError() {
		return NewTemperatureValueUnknown(), diags
	}

	return TemperatureValue{
		AlarmState: alarmStateVal,
		Instant:    instantVal,
		Margin:     marginVal,
		Maximum:    maximumVal,
		Threshold:  thresholdVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTemperatureValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TemperatureValue {
	object, diags := NewTemperatureValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTemperatureValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TemperatureType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTemperatureValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTemperatureValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTemperatureValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTemperatureValueMust(TemperatureValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TemperatureType) ValueType(ctx context.Context) attr.Value {
	return TemperatureValue{}
}

var _ basetypes.ObjectValuable = TemperatureValue{}

type TemperatureValue struct {
	AlarmState basetypes.BoolValue  `tfsdk:"alarm_state"`
	Instant    basetypes.Int64Value `tfsdk:"instant"`
	Margin     basetypes.Int64Value `tfsdk:"margin"`
	Maximum    basetypes.Int64Value `tfsdk:"maximum"`
	Threshold  basetypes.Int64Value `tfsdk:"threshold"`
	state      attr.ValueState
}

func (v TemperatureValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["alarm_state"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["instant"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["margin"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["maximum"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["threshold"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.AlarmState.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alarm_state"] = val

		val, err = v.Instant.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["instant"] = val

		val, err = v.Margin.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["margin"] = val

		val, err = v.Maximum.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["maximum"] = val

		val, err = v.Threshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["threshold"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TemperatureValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TemperatureValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TemperatureValue) String() string {
	return "TemperatureValue"
}

func (v TemperatureValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"alarm_state": basetypes.BoolType{},
		"instant":     basetypes.Int64Type{},
		"margin":      basetypes.Int64Type{},
		"maximum":     basetypes.Int64Type{},
		"threshold":   basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"alarm_state": v.AlarmState,
			"instant":     v.Instant,
			"margin":      v.Margin,
			"maximum":     v.Maximum,
			"threshold":   v.Threshold,
		})

	return objVal, diags
}

func (v TemperatureValue) Equal(o attr.Value) bool {
	other, ok := o.(TemperatureValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AlarmState.Equal(other.AlarmState) {
		return false
	}

	if !v.Instant.Equal(other.Instant) {
		return false
	}

	if !v.Margin.Equal(other.Margin) {
		return false
	}

	if !v.Maximum.Equal(other.Maximum) {
		return false
	}

	if !v.Threshold.Equal(other.Threshold) {
		return false
	}

	return true
}

func (v TemperatureValue) Type(ctx context.Context) attr.Type {
	return TemperatureType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TemperatureValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"alarm_state": basetypes.BoolType{},
		"instant":     basetypes.Int64Type{},
		"margin":      basetypes.Int64Type{},
		"maximum":     basetypes.Int64Type{},
		"threshold":   basetypes.Int64Type{},
	}
}
