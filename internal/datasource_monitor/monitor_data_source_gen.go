// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_monitor

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func MonitorDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_version": schema.StringAttribute{
				Computed: true,
			},
			"hash": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "resource content will be returned as it was at the time of this git hash",
				MarkdownDescription: "resource content will be returned as it was at the time of this git hash",
			},
			"kind": schema.StringAttribute{
				Computed: true,
			},
			"metadata": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"annotations": schema.MapAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"labels": schema.MapAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"namespace": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: MetadataType{
					ObjectType: types.ObjectType{
						AttrTypes: MetadataValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "name of the Monitor",
				MarkdownDescription: "name of the Monitor",
			},
			"namespace": schema.StringAttribute{
				Required:            true,
				Description:         "the namespace scope in which to operate",
				MarkdownDescription: "the namespace scope in which to operate",
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"cpu": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Optional:            true,
								Description:         "Enable or disable CPU monitoring.",
								MarkdownDescription: "Enable or disable CPU monitoring.",
							},
							"utilization": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"critical_threshold": schema.Int64Attribute{
										Optional:            true,
										Description:         "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
										MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
									},
									"falling_delta": schema.Int64Attribute{
										Optional:            true,
										Description:         "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
										MarkdownDescription: "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
									},
									"major_threshold": schema.Int64Attribute{
										Optional:            true,
										Description:         "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
										MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
									},
									"minor_threshold": schema.Int64Attribute{
										Optional:            true,
										Description:         "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
										MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
									},
								},
								CustomType: UtilizationType{
									ObjectType: types.ObjectType{
										AttrTypes: UtilizationValue{}.AttributeTypes(ctx),
									},
								},
								Optional:            true,
								Description:         "Parameters relating to CPU utilization monitoring.",
								MarkdownDescription: "Parameters relating to CPU utilization monitoring.",
							},
						},
						CustomType: CpuType{
							ObjectType: types.ObjectType{
								AttrTypes: CpuValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "CPU monitoring for targets matching this Monitor.",
						MarkdownDescription: "CPU monitoring for targets matching this Monitor.",
					},
					"memory": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Optional:            true,
								Description:         "Enable or disable memory monitoring.",
								MarkdownDescription: "Enable or disable memory monitoring.",
							},
							"utilization_1": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"critical_threshold": schema.Int64Attribute{
										Optional:            true,
										Description:         "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
										MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
									},
									"falling_delta": schema.Int64Attribute{
										Optional:            true,
										Description:         "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
										MarkdownDescription: "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
									},
									"major_threshold": schema.Int64Attribute{
										Optional:            true,
										Description:         "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
										MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
									},
									"minor_threshold": schema.Int64Attribute{
										Optional:            true,
										Description:         "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
										MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
									},
								},
								CustomType: Utilization1Type{
									ObjectType: types.ObjectType{
										AttrTypes: Utilization1Value{}.AttributeTypes(ctx),
									},
								},
								Optional:            true,
								Description:         "Parameters relating to memory utilization monitoring.",
								MarkdownDescription: "Parameters relating to memory utilization monitoring.",
							},
						},
						CustomType: MemoryType{
							ObjectType: types.ObjectType{
								AttrTypes: MemoryValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "Memory monitoring for targets matching this Monitor.",
						MarkdownDescription: "Memory monitoring for targets matching this Monitor.",
					},
					"target_selector": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Description:         "Selector to use when including targets to monitor.",
						MarkdownDescription: "Selector to use when including targets to monitor.",
					},
					"targets": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Description:         "References to targets to monitor.",
						MarkdownDescription: "References to targets to monitor.",
					},
					"volume": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Optional:            true,
								Description:         "Enable or disable volume monitoring.",
								MarkdownDescription: "Enable or disable volume monitoring.",
							},
							"utilization_2": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"critical_threshold": schema.Int64Attribute{
										Optional:            true,
										Description:         "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
										MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
									},
									"falling_delta": schema.Int64Attribute{
										Optional:            true,
										Description:         "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
										MarkdownDescription: "The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
									},
									"major_threshold": schema.Int64Attribute{
										Optional:            true,
										Description:         "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
										MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
									},
									"minor_threshold": schema.Int64Attribute{
										Optional:            true,
										Description:         "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
										MarkdownDescription: "The minimum average utilization over the last 1 minute to trigger a minor alarm.",
									},
								},
								CustomType: Utilization2Type{
									ObjectType: types.ObjectType{
										AttrTypes: Utilization2Value{}.AttributeTypes(ctx),
									},
								},
								Optional:            true,
								Description:         "Parameters relating to volume utilization monitoring.",
								MarkdownDescription: "Parameters relating to volume utilization monitoring.",
							},
						},
						CustomType: VolumeType{
							ObjectType: types.ObjectType{
								AttrTypes: VolumeValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "Volume monitoring for targets matching this Monitor.",
						MarkdownDescription: "Volume monitoring for targets matching this Monitor.",
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "MonitorSpec defines the desired state of Monitor",
				MarkdownDescription: "MonitorSpec defines the desired state of Monitor",
			},
			"status": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"targets": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "Targets being monitored.",
						MarkdownDescription: "Targets being monitored.",
					},
				},
				CustomType: StatusType{
					ObjectType: types.ObjectType{
						AttrTypes: StatusValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "MonitorStatus defines the observed state of Monitor",
				MarkdownDescription: "MonitorStatus defines the observed state of Monitor",
			},
		},
	}
}

type MonitorModel struct {
	ApiVersion types.String  `tfsdk:"api_version"`
	Hash       types.String  `tfsdk:"hash"`
	Kind       types.String  `tfsdk:"kind"`
	Metadata   MetadataValue `tfsdk:"metadata"`
	Name       types.String  `tfsdk:"name"`
	Namespace  types.String  `tfsdk:"namespace"`
	Spec       SpecValue     `tfsdk:"spec"`
	Status     StatusValue   `tfsdk:"status"`
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return nil, diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return nil, diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return nil, diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		Namespace:   namespaceVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		Namespace:   namespaceVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	Annotations basetypes.MapValue    `tfsdk:"annotations"`
	Labels      basetypes.MapValue    `tfsdk:"labels"`
	Name        basetypes.StringValue `tfsdk:"name"`
	Namespace   basetypes.StringValue `tfsdk:"namespace"`
	state       attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["annotations"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["labels"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["namespace"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Annotations.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["annotations"] = val

		val, err = v.Labels.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["labels"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Namespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespace"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var annotationsVal basetypes.MapValue
	switch {
	case v.Annotations.IsUnknown():
		annotationsVal = types.MapUnknown(types.StringType)
	case v.Annotations.IsNull():
		annotationsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		annotationsVal, d = types.MapValue(types.StringType, v.Annotations.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name":      basetypes.StringType{},
			"namespace": basetypes.StringType{},
		}), diags
	}

	var labelsVal basetypes.MapValue
	switch {
	case v.Labels.IsUnknown():
		labelsVal = types.MapUnknown(types.StringType)
	case v.Labels.IsNull():
		labelsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		labelsVal, d = types.MapValue(types.StringType, v.Labels.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name":      basetypes.StringType{},
			"namespace": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"annotations": annotationsVal,
			"labels":      labelsVal,
			"name":        v.Name,
			"namespace":   v.Namespace,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Annotations.Equal(other.Annotations) {
		return false
	}

	if !v.Labels.Equal(other.Labels) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Namespace.Equal(other.Namespace) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	cpuAttribute, ok := attributes["cpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cpu is missing from object`)

		return nil, diags
	}

	cpuVal, ok := cpuAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cpu expected to be basetypes.ObjectValue, was: %T`, cpuAttribute))
	}

	memoryAttribute, ok := attributes["memory"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`memory is missing from object`)

		return nil, diags
	}

	memoryVal, ok := memoryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`memory expected to be basetypes.ObjectValue, was: %T`, memoryAttribute))
	}

	targetSelectorAttribute, ok := attributes["target_selector"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target_selector is missing from object`)

		return nil, diags
	}

	targetSelectorVal, ok := targetSelectorAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target_selector expected to be basetypes.ListValue, was: %T`, targetSelectorAttribute))
	}

	targetsAttribute, ok := attributes["targets"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`targets is missing from object`)

		return nil, diags
	}

	targetsVal, ok := targetsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`targets expected to be basetypes.ListValue, was: %T`, targetsAttribute))
	}

	volumeAttribute, ok := attributes["volume"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume is missing from object`)

		return nil, diags
	}

	volumeVal, ok := volumeAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume expected to be basetypes.ObjectValue, was: %T`, volumeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		Cpu:            cpuVal,
		Memory:         memoryVal,
		TargetSelector: targetSelectorVal,
		Targets:        targetsVal,
		Volume:         volumeVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	cpuAttribute, ok := attributes["cpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cpu is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	cpuVal, ok := cpuAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cpu expected to be basetypes.ObjectValue, was: %T`, cpuAttribute))
	}

	memoryAttribute, ok := attributes["memory"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`memory is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	memoryVal, ok := memoryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`memory expected to be basetypes.ObjectValue, was: %T`, memoryAttribute))
	}

	targetSelectorAttribute, ok := attributes["target_selector"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target_selector is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	targetSelectorVal, ok := targetSelectorAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target_selector expected to be basetypes.ListValue, was: %T`, targetSelectorAttribute))
	}

	targetsAttribute, ok := attributes["targets"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`targets is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	targetsVal, ok := targetsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`targets expected to be basetypes.ListValue, was: %T`, targetsAttribute))
	}

	volumeAttribute, ok := attributes["volume"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	volumeVal, ok := volumeAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume expected to be basetypes.ObjectValue, was: %T`, volumeAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		Cpu:            cpuVal,
		Memory:         memoryVal,
		TargetSelector: targetSelectorVal,
		Targets:        targetsVal,
		Volume:         volumeVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	Cpu            basetypes.ObjectValue `tfsdk:"cpu"`
	Memory         basetypes.ObjectValue `tfsdk:"memory"`
	TargetSelector basetypes.ListValue   `tfsdk:"target_selector"`
	Targets        basetypes.ListValue   `tfsdk:"targets"`
	Volume         basetypes.ObjectValue `tfsdk:"volume"`
	state          attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["cpu"] = basetypes.ObjectType{
		AttrTypes: CpuValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["memory"] = basetypes.ObjectType{
		AttrTypes: MemoryValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["target_selector"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["targets"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["volume"] = basetypes.ObjectType{
		AttrTypes: VolumeValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Cpu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cpu"] = val

		val, err = v.Memory.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["memory"] = val

		val, err = v.TargetSelector.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["target_selector"] = val

		val, err = v.Targets.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["targets"] = val

		val, err = v.Volume.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var cpu basetypes.ObjectValue

	if v.Cpu.IsNull() {
		cpu = types.ObjectNull(
			CpuValue{}.AttributeTypes(ctx),
		)
	}

	if v.Cpu.IsUnknown() {
		cpu = types.ObjectUnknown(
			CpuValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Cpu.IsNull() && !v.Cpu.IsUnknown() {
		cpu = types.ObjectValueMust(
			CpuValue{}.AttributeTypes(ctx),
			v.Cpu.Attributes(),
		)
	}

	var memory basetypes.ObjectValue

	if v.Memory.IsNull() {
		memory = types.ObjectNull(
			MemoryValue{}.AttributeTypes(ctx),
		)
	}

	if v.Memory.IsUnknown() {
		memory = types.ObjectUnknown(
			MemoryValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Memory.IsNull() && !v.Memory.IsUnknown() {
		memory = types.ObjectValueMust(
			MemoryValue{}.AttributeTypes(ctx),
			v.Memory.Attributes(),
		)
	}

	var volume basetypes.ObjectValue

	if v.Volume.IsNull() {
		volume = types.ObjectNull(
			VolumeValue{}.AttributeTypes(ctx),
		)
	}

	if v.Volume.IsUnknown() {
		volume = types.ObjectUnknown(
			VolumeValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Volume.IsNull() && !v.Volume.IsUnknown() {
		volume = types.ObjectValueMust(
			VolumeValue{}.AttributeTypes(ctx),
			v.Volume.Attributes(),
		)
	}

	var targetSelectorVal basetypes.ListValue
	switch {
	case v.TargetSelector.IsUnknown():
		targetSelectorVal = types.ListUnknown(types.StringType)
	case v.TargetSelector.IsNull():
		targetSelectorVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		targetSelectorVal, d = types.ListValue(types.StringType, v.TargetSelector.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"cpu": basetypes.ObjectType{
				AttrTypes: CpuValue{}.AttributeTypes(ctx),
			},
			"memory": basetypes.ObjectType{
				AttrTypes: MemoryValue{}.AttributeTypes(ctx),
			},
			"target_selector": basetypes.ListType{
				ElemType: types.StringType,
			},
			"targets": basetypes.ListType{
				ElemType: types.StringType,
			},
			"volume": basetypes.ObjectType{
				AttrTypes: VolumeValue{}.AttributeTypes(ctx),
			},
		}), diags
	}

	var targetsVal basetypes.ListValue
	switch {
	case v.Targets.IsUnknown():
		targetsVal = types.ListUnknown(types.StringType)
	case v.Targets.IsNull():
		targetsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		targetsVal, d = types.ListValue(types.StringType, v.Targets.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"cpu": basetypes.ObjectType{
				AttrTypes: CpuValue{}.AttributeTypes(ctx),
			},
			"memory": basetypes.ObjectType{
				AttrTypes: MemoryValue{}.AttributeTypes(ctx),
			},
			"target_selector": basetypes.ListType{
				ElemType: types.StringType,
			},
			"targets": basetypes.ListType{
				ElemType: types.StringType,
			},
			"volume": basetypes.ObjectType{
				AttrTypes: VolumeValue{}.AttributeTypes(ctx),
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"cpu": basetypes.ObjectType{
			AttrTypes: CpuValue{}.AttributeTypes(ctx),
		},
		"memory": basetypes.ObjectType{
			AttrTypes: MemoryValue{}.AttributeTypes(ctx),
		},
		"target_selector": basetypes.ListType{
			ElemType: types.StringType,
		},
		"targets": basetypes.ListType{
			ElemType: types.StringType,
		},
		"volume": basetypes.ObjectType{
			AttrTypes: VolumeValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"cpu":             cpu,
			"memory":          memory,
			"target_selector": targetSelectorVal,
			"targets":         targetsVal,
			"volume":          volume,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Cpu.Equal(other.Cpu) {
		return false
	}

	if !v.Memory.Equal(other.Memory) {
		return false
	}

	if !v.TargetSelector.Equal(other.TargetSelector) {
		return false
	}

	if !v.Targets.Equal(other.Targets) {
		return false
	}

	if !v.Volume.Equal(other.Volume) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cpu": basetypes.ObjectType{
			AttrTypes: CpuValue{}.AttributeTypes(ctx),
		},
		"memory": basetypes.ObjectType{
			AttrTypes: MemoryValue{}.AttributeTypes(ctx),
		},
		"target_selector": basetypes.ListType{
			ElemType: types.StringType,
		},
		"targets": basetypes.ListType{
			ElemType: types.StringType,
		},
		"volume": basetypes.ObjectType{
			AttrTypes: VolumeValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = CpuType{}

type CpuType struct {
	basetypes.ObjectType
}

func (t CpuType) Equal(o attr.Type) bool {
	other, ok := o.(CpuType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CpuType) String() string {
	return "CpuType"
}

func (t CpuType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilizationAttribute, ok := attributes["utilization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization is missing from object`)

		return nil, diags
	}

	utilizationVal, ok := utilizationAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization expected to be basetypes.ObjectValue, was: %T`, utilizationAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CpuValue{
		Enabled:     enabledVal,
		Utilization: utilizationVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewCpuValueNull() CpuValue {
	return CpuValue{
		state: attr.ValueStateNull,
	}
}

func NewCpuValueUnknown() CpuValue {
	return CpuValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCpuValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CpuValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CpuValue Attribute Value",
				"While creating a CpuValue value, a missing attribute value was detected. "+
					"A CpuValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CpuValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CpuValue Attribute Type",
				"While creating a CpuValue value, an invalid attribute value was detected. "+
					"A CpuValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CpuValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CpuValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CpuValue Attribute Value",
				"While creating a CpuValue value, an extra attribute value was detected. "+
					"A CpuValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CpuValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCpuValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewCpuValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilizationAttribute, ok := attributes["utilization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization is missing from object`)

		return NewCpuValueUnknown(), diags
	}

	utilizationVal, ok := utilizationAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization expected to be basetypes.ObjectValue, was: %T`, utilizationAttribute))
	}

	if diags.HasError() {
		return NewCpuValueUnknown(), diags
	}

	return CpuValue{
		Enabled:     enabledVal,
		Utilization: utilizationVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewCpuValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CpuValue {
	object, diags := NewCpuValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCpuValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CpuType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCpuValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCpuValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCpuValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCpuValueMust(CpuValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CpuType) ValueType(ctx context.Context) attr.Value {
	return CpuValue{}
}

var _ basetypes.ObjectValuable = CpuValue{}

type CpuValue struct {
	Enabled     basetypes.BoolValue   `tfsdk:"enabled"`
	Utilization basetypes.ObjectValue `tfsdk:"utilization"`
	state       attr.ValueState
}

func (v CpuValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["utilization"] = basetypes.ObjectType{
		AttrTypes: UtilizationValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Utilization.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["utilization"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CpuValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CpuValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CpuValue) String() string {
	return "CpuValue"
}

func (v CpuValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var utilization basetypes.ObjectValue

	if v.Utilization.IsNull() {
		utilization = types.ObjectNull(
			UtilizationValue{}.AttributeTypes(ctx),
		)
	}

	if v.Utilization.IsUnknown() {
		utilization = types.ObjectUnknown(
			UtilizationValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Utilization.IsNull() && !v.Utilization.IsUnknown() {
		utilization = types.ObjectValueMust(
			UtilizationValue{}.AttributeTypes(ctx),
			v.Utilization.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization": basetypes.ObjectType{
			AttrTypes: UtilizationValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":     v.Enabled,
			"utilization": utilization,
		})

	return objVal, diags
}

func (v CpuValue) Equal(o attr.Value) bool {
	other, ok := o.(CpuValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Utilization.Equal(other.Utilization) {
		return false
	}

	return true
}

func (v CpuValue) Type(ctx context.Context) attr.Type {
	return CpuType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CpuValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization": basetypes.ObjectType{
			AttrTypes: UtilizationValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = UtilizationType{}

type UtilizationType struct {
	basetypes.ObjectType
}

func (t UtilizationType) Equal(o attr.Type) bool {
	other, ok := o.(UtilizationType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UtilizationType) String() string {
	return "UtilizationType"
}

func (t UtilizationType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return nil, diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return nil, diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return nil, diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return nil, diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UtilizationValue{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilizationValueNull() UtilizationValue {
	return UtilizationValue{
		state: attr.ValueStateNull,
	}
}

func NewUtilizationValueUnknown() UtilizationValue {
	return UtilizationValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUtilizationValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UtilizationValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UtilizationValue Attribute Value",
				"While creating a UtilizationValue value, a missing attribute value was detected. "+
					"A UtilizationValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UtilizationValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UtilizationValue Attribute Type",
				"While creating a UtilizationValue value, an invalid attribute value was detected. "+
					"A UtilizationValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UtilizationValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UtilizationValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UtilizationValue Attribute Value",
				"While creating a UtilizationValue value, an extra attribute value was detected. "+
					"A UtilizationValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UtilizationValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUtilizationValueUnknown(), diags
	}

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return NewUtilizationValueUnknown(), diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return NewUtilizationValueUnknown(), diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return NewUtilizationValueUnknown(), diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return NewUtilizationValueUnknown(), diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return NewUtilizationValueUnknown(), diags
	}

	return UtilizationValue{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilizationValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UtilizationValue {
	object, diags := NewUtilizationValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUtilizationValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UtilizationType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUtilizationValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUtilizationValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUtilizationValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUtilizationValueMust(UtilizationValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UtilizationType) ValueType(ctx context.Context) attr.Value {
	return UtilizationValue{}
}

var _ basetypes.ObjectValuable = UtilizationValue{}

type UtilizationValue struct {
	CriticalThreshold basetypes.Int64Value `tfsdk:"critical_threshold"`
	FallingDelta      basetypes.Int64Value `tfsdk:"falling_delta"`
	MajorThreshold    basetypes.Int64Value `tfsdk:"major_threshold"`
	MinorThreshold    basetypes.Int64Value `tfsdk:"minor_threshold"`
	state             attr.ValueState
}

func (v UtilizationValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["critical_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["falling_delta"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["major_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["minor_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.CriticalThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["critical_threshold"] = val

		val, err = v.FallingDelta.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["falling_delta"] = val

		val, err = v.MajorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["major_threshold"] = val

		val, err = v.MinorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minor_threshold"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UtilizationValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UtilizationValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UtilizationValue) String() string {
	return "UtilizationValue"
}

func (v UtilizationValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"critical_threshold": v.CriticalThreshold,
			"falling_delta":      v.FallingDelta,
			"major_threshold":    v.MajorThreshold,
			"minor_threshold":    v.MinorThreshold,
		})

	return objVal, diags
}

func (v UtilizationValue) Equal(o attr.Value) bool {
	other, ok := o.(UtilizationValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CriticalThreshold.Equal(other.CriticalThreshold) {
		return false
	}

	if !v.FallingDelta.Equal(other.FallingDelta) {
		return false
	}

	if !v.MajorThreshold.Equal(other.MajorThreshold) {
		return false
	}

	if !v.MinorThreshold.Equal(other.MinorThreshold) {
		return false
	}

	return true
}

func (v UtilizationValue) Type(ctx context.Context) attr.Type {
	return UtilizationType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UtilizationValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = MemoryType{}

type MemoryType struct {
	basetypes.ObjectType
}

func (t MemoryType) Equal(o attr.Type) bool {
	other, ok := o.(MemoryType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MemoryType) String() string {
	return "MemoryType"
}

func (t MemoryType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilization1Attribute, ok := attributes["utilization_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization_1 is missing from object`)

		return nil, diags
	}

	utilization1Val, ok := utilization1Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization_1 expected to be basetypes.ObjectValue, was: %T`, utilization1Attribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MemoryValue{
		Enabled:      enabledVal,
		Utilization1: utilization1Val,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewMemoryValueNull() MemoryValue {
	return MemoryValue{
		state: attr.ValueStateNull,
	}
}

func NewMemoryValueUnknown() MemoryValue {
	return MemoryValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMemoryValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MemoryValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MemoryValue Attribute Value",
				"While creating a MemoryValue value, a missing attribute value was detected. "+
					"A MemoryValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MemoryValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MemoryValue Attribute Type",
				"While creating a MemoryValue value, an invalid attribute value was detected. "+
					"A MemoryValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MemoryValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MemoryValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MemoryValue Attribute Value",
				"While creating a MemoryValue value, an extra attribute value was detected. "+
					"A MemoryValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MemoryValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMemoryValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewMemoryValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilization1Attribute, ok := attributes["utilization_1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization_1 is missing from object`)

		return NewMemoryValueUnknown(), diags
	}

	utilization1Val, ok := utilization1Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization_1 expected to be basetypes.ObjectValue, was: %T`, utilization1Attribute))
	}

	if diags.HasError() {
		return NewMemoryValueUnknown(), diags
	}

	return MemoryValue{
		Enabled:      enabledVal,
		Utilization1: utilization1Val,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewMemoryValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MemoryValue {
	object, diags := NewMemoryValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMemoryValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MemoryType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMemoryValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMemoryValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMemoryValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMemoryValueMust(MemoryValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MemoryType) ValueType(ctx context.Context) attr.Value {
	return MemoryValue{}
}

var _ basetypes.ObjectValuable = MemoryValue{}

type MemoryValue struct {
	Enabled      basetypes.BoolValue   `tfsdk:"enabled"`
	Utilization1 basetypes.ObjectValue `tfsdk:"utilization_1"`
	state        attr.ValueState
}

func (v MemoryValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["utilization_1"] = basetypes.ObjectType{
		AttrTypes: Utilization1Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Utilization1.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["utilization_1"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MemoryValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MemoryValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MemoryValue) String() string {
	return "MemoryValue"
}

func (v MemoryValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var utilization1 basetypes.ObjectValue

	if v.Utilization1.IsNull() {
		utilization1 = types.ObjectNull(
			Utilization1Value{}.AttributeTypes(ctx),
		)
	}

	if v.Utilization1.IsUnknown() {
		utilization1 = types.ObjectUnknown(
			Utilization1Value{}.AttributeTypes(ctx),
		)
	}

	if !v.Utilization1.IsNull() && !v.Utilization1.IsUnknown() {
		utilization1 = types.ObjectValueMust(
			Utilization1Value{}.AttributeTypes(ctx),
			v.Utilization1.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization_1": basetypes.ObjectType{
			AttrTypes: Utilization1Value{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":       v.Enabled,
			"utilization_1": utilization1,
		})

	return objVal, diags
}

func (v MemoryValue) Equal(o attr.Value) bool {
	other, ok := o.(MemoryValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Utilization1.Equal(other.Utilization1) {
		return false
	}

	return true
}

func (v MemoryValue) Type(ctx context.Context) attr.Type {
	return MemoryType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MemoryValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization_1": basetypes.ObjectType{
			AttrTypes: Utilization1Value{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = Utilization1Type{}

type Utilization1Type struct {
	basetypes.ObjectType
}

func (t Utilization1Type) Equal(o attr.Type) bool {
	other, ok := o.(Utilization1Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Utilization1Type) String() string {
	return "Utilization1Type"
}

func (t Utilization1Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return nil, diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return nil, diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return nil, diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return nil, diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Utilization1Value{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilization1ValueNull() Utilization1Value {
	return Utilization1Value{
		state: attr.ValueStateNull,
	}
}

func NewUtilization1ValueUnknown() Utilization1Value {
	return Utilization1Value{
		state: attr.ValueStateUnknown,
	}
}

func NewUtilization1Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Utilization1Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Utilization1Value Attribute Value",
				"While creating a Utilization1Value value, a missing attribute value was detected. "+
					"A Utilization1Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Utilization1Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Utilization1Value Attribute Type",
				"While creating a Utilization1Value value, an invalid attribute value was detected. "+
					"A Utilization1Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Utilization1Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Utilization1Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Utilization1Value Attribute Value",
				"While creating a Utilization1Value value, an extra attribute value was detected. "+
					"A Utilization1Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Utilization1Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUtilization1ValueUnknown(), diags
	}

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return NewUtilization1ValueUnknown(), diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return NewUtilization1ValueUnknown(), diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return NewUtilization1ValueUnknown(), diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return NewUtilization1ValueUnknown(), diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return NewUtilization1ValueUnknown(), diags
	}

	return Utilization1Value{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilization1ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Utilization1Value {
	object, diags := NewUtilization1Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUtilization1ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Utilization1Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUtilization1ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUtilization1ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUtilization1ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUtilization1ValueMust(Utilization1Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Utilization1Type) ValueType(ctx context.Context) attr.Value {
	return Utilization1Value{}
}

var _ basetypes.ObjectValuable = Utilization1Value{}

type Utilization1Value struct {
	CriticalThreshold basetypes.Int64Value `tfsdk:"critical_threshold"`
	FallingDelta      basetypes.Int64Value `tfsdk:"falling_delta"`
	MajorThreshold    basetypes.Int64Value `tfsdk:"major_threshold"`
	MinorThreshold    basetypes.Int64Value `tfsdk:"minor_threshold"`
	state             attr.ValueState
}

func (v Utilization1Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["critical_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["falling_delta"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["major_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["minor_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.CriticalThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["critical_threshold"] = val

		val, err = v.FallingDelta.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["falling_delta"] = val

		val, err = v.MajorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["major_threshold"] = val

		val, err = v.MinorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minor_threshold"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Utilization1Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Utilization1Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Utilization1Value) String() string {
	return "Utilization1Value"
}

func (v Utilization1Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"critical_threshold": v.CriticalThreshold,
			"falling_delta":      v.FallingDelta,
			"major_threshold":    v.MajorThreshold,
			"minor_threshold":    v.MinorThreshold,
		})

	return objVal, diags
}

func (v Utilization1Value) Equal(o attr.Value) bool {
	other, ok := o.(Utilization1Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CriticalThreshold.Equal(other.CriticalThreshold) {
		return false
	}

	if !v.FallingDelta.Equal(other.FallingDelta) {
		return false
	}

	if !v.MajorThreshold.Equal(other.MajorThreshold) {
		return false
	}

	if !v.MinorThreshold.Equal(other.MinorThreshold) {
		return false
	}

	return true
}

func (v Utilization1Value) Type(ctx context.Context) attr.Type {
	return Utilization1Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Utilization1Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = VolumeType{}

type VolumeType struct {
	basetypes.ObjectType
}

func (t VolumeType) Equal(o attr.Type) bool {
	other, ok := o.(VolumeType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VolumeType) String() string {
	return "VolumeType"
}

func (t VolumeType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilization2Attribute, ok := attributes["utilization_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization_2 is missing from object`)

		return nil, diags
	}

	utilization2Val, ok := utilization2Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization_2 expected to be basetypes.ObjectValue, was: %T`, utilization2Attribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VolumeValue{
		Enabled:      enabledVal,
		Utilization2: utilization2Val,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewVolumeValueNull() VolumeValue {
	return VolumeValue{
		state: attr.ValueStateNull,
	}
}

func NewVolumeValueUnknown() VolumeValue {
	return VolumeValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVolumeValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VolumeValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VolumeValue Attribute Value",
				"While creating a VolumeValue value, a missing attribute value was detected. "+
					"A VolumeValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VolumeValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VolumeValue Attribute Type",
				"While creating a VolumeValue value, an invalid attribute value was detected. "+
					"A VolumeValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VolumeValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VolumeValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VolumeValue Attribute Value",
				"While creating a VolumeValue value, an extra attribute value was detected. "+
					"A VolumeValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VolumeValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVolumeValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewVolumeValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	utilization2Attribute, ok := attributes["utilization_2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`utilization_2 is missing from object`)

		return NewVolumeValueUnknown(), diags
	}

	utilization2Val, ok := utilization2Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`utilization_2 expected to be basetypes.ObjectValue, was: %T`, utilization2Attribute))
	}

	if diags.HasError() {
		return NewVolumeValueUnknown(), diags
	}

	return VolumeValue{
		Enabled:      enabledVal,
		Utilization2: utilization2Val,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewVolumeValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VolumeValue {
	object, diags := NewVolumeValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVolumeValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VolumeType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVolumeValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVolumeValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVolumeValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVolumeValueMust(VolumeValue{}.AttributeTypes(ctx), attributes), nil
}

func (t VolumeType) ValueType(ctx context.Context) attr.Value {
	return VolumeValue{}
}

var _ basetypes.ObjectValuable = VolumeValue{}

type VolumeValue struct {
	Enabled      basetypes.BoolValue   `tfsdk:"enabled"`
	Utilization2 basetypes.ObjectValue `tfsdk:"utilization_2"`
	state        attr.ValueState
}

func (v VolumeValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["utilization_2"] = basetypes.ObjectType{
		AttrTypes: Utilization2Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Utilization2.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["utilization_2"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VolumeValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VolumeValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VolumeValue) String() string {
	return "VolumeValue"
}

func (v VolumeValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var utilization2 basetypes.ObjectValue

	if v.Utilization2.IsNull() {
		utilization2 = types.ObjectNull(
			Utilization2Value{}.AttributeTypes(ctx),
		)
	}

	if v.Utilization2.IsUnknown() {
		utilization2 = types.ObjectUnknown(
			Utilization2Value{}.AttributeTypes(ctx),
		)
	}

	if !v.Utilization2.IsNull() && !v.Utilization2.IsUnknown() {
		utilization2 = types.ObjectValueMust(
			Utilization2Value{}.AttributeTypes(ctx),
			v.Utilization2.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization_2": basetypes.ObjectType{
			AttrTypes: Utilization2Value{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":       v.Enabled,
			"utilization_2": utilization2,
		})

	return objVal, diags
}

func (v VolumeValue) Equal(o attr.Value) bool {
	other, ok := o.(VolumeValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Utilization2.Equal(other.Utilization2) {
		return false
	}

	return true
}

func (v VolumeValue) Type(ctx context.Context) attr.Type {
	return VolumeType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VolumeValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"utilization_2": basetypes.ObjectType{
			AttrTypes: Utilization2Value{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = Utilization2Type{}

type Utilization2Type struct {
	basetypes.ObjectType
}

func (t Utilization2Type) Equal(o attr.Type) bool {
	other, ok := o.(Utilization2Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Utilization2Type) String() string {
	return "Utilization2Type"
}

func (t Utilization2Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return nil, diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return nil, diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return nil, diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return nil, diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Utilization2Value{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilization2ValueNull() Utilization2Value {
	return Utilization2Value{
		state: attr.ValueStateNull,
	}
}

func NewUtilization2ValueUnknown() Utilization2Value {
	return Utilization2Value{
		state: attr.ValueStateUnknown,
	}
}

func NewUtilization2Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Utilization2Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Utilization2Value Attribute Value",
				"While creating a Utilization2Value value, a missing attribute value was detected. "+
					"A Utilization2Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Utilization2Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Utilization2Value Attribute Type",
				"While creating a Utilization2Value value, an invalid attribute value was detected. "+
					"A Utilization2Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Utilization2Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Utilization2Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Utilization2Value Attribute Value",
				"While creating a Utilization2Value value, an extra attribute value was detected. "+
					"A Utilization2Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Utilization2Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUtilization2ValueUnknown(), diags
	}

	criticalThresholdAttribute, ok := attributes["critical_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`critical_threshold is missing from object`)

		return NewUtilization2ValueUnknown(), diags
	}

	criticalThresholdVal, ok := criticalThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`critical_threshold expected to be basetypes.Int64Value, was: %T`, criticalThresholdAttribute))
	}

	fallingDeltaAttribute, ok := attributes["falling_delta"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`falling_delta is missing from object`)

		return NewUtilization2ValueUnknown(), diags
	}

	fallingDeltaVal, ok := fallingDeltaAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`falling_delta expected to be basetypes.Int64Value, was: %T`, fallingDeltaAttribute))
	}

	majorThresholdAttribute, ok := attributes["major_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major_threshold is missing from object`)

		return NewUtilization2ValueUnknown(), diags
	}

	majorThresholdVal, ok := majorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major_threshold expected to be basetypes.Int64Value, was: %T`, majorThresholdAttribute))
	}

	minorThresholdAttribute, ok := attributes["minor_threshold"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor_threshold is missing from object`)

		return NewUtilization2ValueUnknown(), diags
	}

	minorThresholdVal, ok := minorThresholdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor_threshold expected to be basetypes.Int64Value, was: %T`, minorThresholdAttribute))
	}

	if diags.HasError() {
		return NewUtilization2ValueUnknown(), diags
	}

	return Utilization2Value{
		CriticalThreshold: criticalThresholdVal,
		FallingDelta:      fallingDeltaVal,
		MajorThreshold:    majorThresholdVal,
		MinorThreshold:    minorThresholdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewUtilization2ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Utilization2Value {
	object, diags := NewUtilization2Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUtilization2ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Utilization2Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUtilization2ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUtilization2ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUtilization2ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUtilization2ValueMust(Utilization2Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Utilization2Type) ValueType(ctx context.Context) attr.Value {
	return Utilization2Value{}
}

var _ basetypes.ObjectValuable = Utilization2Value{}

type Utilization2Value struct {
	CriticalThreshold basetypes.Int64Value `tfsdk:"critical_threshold"`
	FallingDelta      basetypes.Int64Value `tfsdk:"falling_delta"`
	MajorThreshold    basetypes.Int64Value `tfsdk:"major_threshold"`
	MinorThreshold    basetypes.Int64Value `tfsdk:"minor_threshold"`
	state             attr.ValueState
}

func (v Utilization2Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["critical_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["falling_delta"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["major_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["minor_threshold"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.CriticalThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["critical_threshold"] = val

		val, err = v.FallingDelta.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["falling_delta"] = val

		val, err = v.MajorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["major_threshold"] = val

		val, err = v.MinorThreshold.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minor_threshold"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Utilization2Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Utilization2Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Utilization2Value) String() string {
	return "Utilization2Value"
}

func (v Utilization2Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"critical_threshold": v.CriticalThreshold,
			"falling_delta":      v.FallingDelta,
			"major_threshold":    v.MajorThreshold,
			"minor_threshold":    v.MinorThreshold,
		})

	return objVal, diags
}

func (v Utilization2Value) Equal(o attr.Value) bool {
	other, ok := o.(Utilization2Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CriticalThreshold.Equal(other.CriticalThreshold) {
		return false
	}

	if !v.FallingDelta.Equal(other.FallingDelta) {
		return false
	}

	if !v.MajorThreshold.Equal(other.MajorThreshold) {
		return false
	}

	if !v.MinorThreshold.Equal(other.MinorThreshold) {
		return false
	}

	return true
}

func (v Utilization2Value) Type(ctx context.Context) attr.Type {
	return Utilization2Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Utilization2Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"critical_threshold": basetypes.Int64Type{},
		"falling_delta":      basetypes.Int64Type{},
		"major_threshold":    basetypes.Int64Type{},
		"minor_threshold":    basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = StatusType{}

type StatusType struct {
	basetypes.ObjectType
}

func (t StatusType) Equal(o attr.Type) bool {
	other, ok := o.(StatusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StatusType) String() string {
	return "StatusType"
}

func (t StatusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	targetsAttribute, ok := attributes["targets"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`targets is missing from object`)

		return nil, diags
	}

	targetsVal, ok := targetsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`targets expected to be basetypes.ListValue, was: %T`, targetsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StatusValue{
		Targets: targetsVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewStatusValueNull() StatusValue {
	return StatusValue{
		state: attr.ValueStateNull,
	}
}

func NewStatusValueUnknown() StatusValue {
	return StatusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStatusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StatusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StatusValue Attribute Value",
				"While creating a StatusValue value, a missing attribute value was detected. "+
					"A StatusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StatusValue Attribute Type",
				"While creating a StatusValue value, an invalid attribute value was detected. "+
					"A StatusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StatusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StatusValue Attribute Value",
				"While creating a StatusValue value, an extra attribute value was detected. "+
					"A StatusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StatusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	targetsAttribute, ok := attributes["targets"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`targets is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	targetsVal, ok := targetsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`targets expected to be basetypes.ListValue, was: %T`, targetsAttribute))
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	return StatusValue{
		Targets: targetsVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewStatusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StatusValue {
	object, diags := NewStatusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStatusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StatusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStatusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStatusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStatusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStatusValueMust(StatusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StatusType) ValueType(ctx context.Context) attr.Value {
	return StatusValue{}
}

var _ basetypes.ObjectValuable = StatusValue{}

type StatusValue struct {
	Targets basetypes.ListValue `tfsdk:"targets"`
	state   attr.ValueState
}

func (v StatusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["targets"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Targets.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["targets"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StatusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StatusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StatusValue) String() string {
	return "StatusValue"
}

func (v StatusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var targetsVal basetypes.ListValue
	switch {
	case v.Targets.IsUnknown():
		targetsVal = types.ListUnknown(types.StringType)
	case v.Targets.IsNull():
		targetsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		targetsVal, d = types.ListValue(types.StringType, v.Targets.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"targets": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"targets": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"targets": targetsVal,
		})

	return objVal, diags
}

func (v StatusValue) Equal(o attr.Value) bool {
	other, ok := o.(StatusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Targets.Equal(other.Targets) {
		return false
	}

	return true
}

func (v StatusValue) Type(ctx context.Context) attr.Type {
	return StatusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StatusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"targets": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
